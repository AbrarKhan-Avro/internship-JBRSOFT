"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.

This settings file is tailored for local development with Docker + Postgres,
and includes Django REST Framework and django-cors-headers configuration.

Make sure to set environment variables in your docker-compose.yml or your shell:
- DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
- DEBUG (1 or 0)
- DJANGO_SECRET_KEY (optional; fallback to a default dev key below)
- DJANGO_ALLOWED_HOSTS (space-separated hosts, optional; default is localhost)
"""

import os
from pathlib import Path

# BASE_DIR like: project_root/backend/
BASE_DIR = Path(__file__).resolve().parent.parent

# Read secret key from env for safety; fallback to local dev key only.
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-*irx1715636mi1dt8gyu4z_!q2035hyugq3h!9kpo6kzmpbx%z",
)

# DEBUG: set to "0" in production. Default to development ON.
DEBUG = os.environ.get("DEBUG", "1") == "1"

# Allowed hosts: read from env (space-separated), or default to localhost and 127.0.0.1.
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost 127.0.0.1").split()

# Application definition
INSTALLED_APPS = [
    # Django built-ins
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party
    "rest_framework",
    "corsheaders",

    # Your apps (uncomment / add apps as you create them)
    # "jobs",
]

MIDDLEWARE = [
    # corsheaders should be as high as possible so it can add CORS headers before other middleware
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Add any project-level template dirs here if you use them
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# -----------------------------------------------------------------------------
# Database
# Try to use Postgres settings from environment (as provided by docker-compose).
# If none provided, default to a local SQLite file for convenience.
# -----------------------------------------------------------------------------
if os.environ.get("DB_NAME") and os.environ.get("DB_USER"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("DB_NAME", "jobportal"),
            "USER": os.environ.get("DB_USER", "jobuser"),
            "PASSWORD": os.environ.get("DB_PASSWORD", "jobpass"),
            "HOST": os.environ.get("DB_HOST", "db"),
            "PORT": os.environ.get("DB_PORT", "5432"),
        }
    }
else:
    # fallback to sqlite for quick local dev without docker
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# -----------------------------------------------------------------------------
# Password validation
# -----------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -----------------------------------------------------------------------------
# Internationalization & Time zone
# -----------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"

# Set to your local timezone. You mentioned being in Bangladesh previously.
TIME_ZONE = os.environ.get("DJANGO_TIME_ZONE", "Asia/Dhaka")

USE_I18N = True
USE_L10N = True
USE_TZ = True

# -----------------------------------------------------------------------------
# Static & Media files (development-friendly defaults)
# -----------------------------------------------------------------------------
STATIC_URL = "/static/"
# when collecting static in production, set STATIC_ROOT
STATIC_ROOT = BASE_DIR / "staticfiles"
# optional: useful during development when serving static files from project
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# -----------------------------------------------------------------------------
# Django REST Framework
# Keep defaults minimal here; expand later as needed (pagination, auth, etc.)
# -----------------------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
}

# -----------------------------------------------------------------------------
# CORS (Allow React dev server to talk to this API during development)
# For production, lock this down to explicit origins.
# -----------------------------------------------------------------------------
CORS_ALLOW_ALL_ORIGINS = True  # dev only. change in production to CORS_ALLOWED_ORIGINS

# -----------------------------------------------------------------------------
# Logging (simple console logger for development)
# -----------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": "INFO"},
}

# -----------------------------------------------------------------------------
# Default primary key field type
# -----------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
